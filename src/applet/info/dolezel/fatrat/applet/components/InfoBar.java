/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InfoBar.java
 *
 * Created on 13.9.2011, 18:48:54
 */
package info.dolezel.fatrat.applet.components;

import info.dolezel.fatrat.applet.FatRatApplet;
import info.dolezel.fatrat.applet.settings.AppletSettings;
import info.dolezel.fatrat.applet.settings.SettingsListener;
import info.dolezel.fatrat.applet.util.Util;
import java.awt.Color;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.security.AccessControlException;
import java.util.Map;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import org.apache.xmlrpc.XmlRpcException;
import org.apache.xmlrpc.client.XmlRpcClient;

/**
 *
 * @author lubos
 */
public class InfoBar extends javax.swing.JFrame implements SettingsListener, ActionListener {
    AppletSettings settings;
    Timer timer;
    XmlRpcClient client;
    String uuid;
    boolean isDragged;
    int lastX, lastY;
    
    /** Creates new form InfoBar */
    public InfoBar(String uuid, AppletSettings settings, XmlRpcClient client) {
        this.settings = settings;
        this.client = client;
        this.uuid = uuid;
        
        initComponents();
        
        this.getContentPane().setBackground(Color.WHITE);
        setSize(400, 16);
        
        try {
            Point pt = MouseInfo.getPointerInfo().getLocation();
            setLocation((int) pt.getX()-5, (int) pt.getY()-5);
        } catch (AccessControlException e) {
            setLocation(200, 200);
        }
        
        int iv = settings.getValue("refreshInterval", 1);
        
        timer = new Timer(FatRatApplet.refreshIntervals[iv]*1000, this);
        timer.setInitialDelay(0);
        timer.start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);
        setType(java.awt.Window.Type.POPUP);
        setUndecorated(true);
        getContentPane().setLayout(new java.awt.GridLayout());

        label.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        label.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        label.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                labelMouseReleased(evt);
            }
        });
        label.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                labelMouseDragged(evt);
            }
        });
        getContentPane().add(label);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void labelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON2) {
            timer.stop();
            this.setVisible(false);
        }
    }//GEN-LAST:event_labelMouseClicked

    private void labelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelMouseDragged
        
        if (!isDragged) {
            isDragged = true;
            lastX = evt.getX();
            lastY = evt.getY();
        } else {
            setLocation(getX()+(evt.getX()-lastX), getY()+(evt.getY()-lastY));
        }
    }//GEN-LAST:event_labelMouseDragged

    private void labelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelMouseReleased
        isDragged = false;
    }//GEN-LAST:event_labelMouseReleased

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel label;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onKeyValueChanged(String key) {
        if (!key.equals("refreshInterval"))
            return;
        int iv = settings.getValue("refreshInterval", 1);
        timer.setDelay(1000*FatRatApplet.refreshIntervals[iv]);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        SwingWorker<Map<String,Object>,Void> worker = new SwingWorker<Map<String,Object>,Void>() {

            @Override
            protected Map<String,Object> doInBackground() throws Exception {
                try {
                    return (Map<String, Object>) client.execute("Transfer.getProperties", new String[] { uuid });
                } catch (XmlRpcException e) {
                    e.printStackTrace();
                    return null;
                }
            }

            @Override
            protected void done() {
                try {
                    Map<String,Object> map = get();
                    if (map == null) {
                        timer.stop();
                        setVisible(false);
                        return;
                    }
                    
                    StringBuilder sb = new StringBuilder();
                    String state = map.get("state").toString();
                    boolean isActive = state.equals("Active") || state.equals("ForcedActive");
                    
                    sb.append("<html><font color=blue>N:</font> ");
                    sb.append(map.get("name"));
                    sb.append(" | ");
                    sb.append("<font color=blue>P:</font> ");
                    
                    long total = (Long) map.get("total");
                    long done = (Long) map.get("done");
                    
                    if (total == 0)
                        sb.append("?");
                    else {
                        float p = ((float) done) / total * 100.0f;
                        sb.append(String.format("%.01f%%", p));
                    }
                    sb.append(" | ");
                    
                    String mode, primaryMode;
                    mode = (String) map.get("mode");
                    primaryMode = (String) map.get("primaryMode");
                    
                    sb.append("<font color=blue>S:</font> ");
                    Object[] speeds = (Object[]) map.get("speeds");
                    int down = (Integer) speeds[0];
                    int up = (Integer) speeds[1];

                    if (down > 0 || (isActive && primaryMode.equals("Download")))
                        sb.append(Util.formatSize(down)).append("/s down ");
                    
                    if (up > 0 || (isActive && mode.equals("Upload")))
                        sb.append(Util.formatSize(up)).append("/s up ");
                    
                    if (!isActive)
                        sb.append("--- ");
                    sb.append("| ");
                    
                    label.setText(sb.toString());
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
            
        };
        
        worker.execute();
    }
}
